// import axios from 'axios';
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      form: '',
      id: '',
      name: '',
      email: '',
      password: '',
      line1: '',
      line2: '',
      city: '',
      state: '',
      shipzip: '',
      cc: '',
      exp: '',
      cvv: '',
      billzip: ''
    };
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  componentDidMount() {
    this.setState({
      form: 'Checkout'
    });
  }

  handleSubmit(destination, e) {
    e.preventDefault();
    this.setState({
      form: destination
    }); // creates new record

    if (e.target.id === 'checkout') {
      const data = this.state;
      delete data.form;
      delete data.id;
      axios.post('/create', data).then(res => {
        this.setState({
          id: res.data._id
        });
      }).catch(error => {
        console.error(error);
      });
    } // updates from forms


    if (e.target.id === 'form1') {
      const data = this.state;
      delete data.form;
      axios.post('/updatesForm1', data).then(res => {
        console.log(res.data);
      }).catch(error => {
        console.error(error);
      });
    }

    if (e.target.id === 'form2') {
      const data = this.state;
      delete data.form;
      axios.post('/updatesForm2', data).then(res => {
        console.log(res.data);
      }).catch(error => {
        console.error(error);
      });
    }

    if (e.target.id === 'form3') {
      const data = this.state;
      delete data.form;
      axios.post('/updatesForm3', data).then(res => {
        console.log(res.data);
      }).catch(error => {
        console.error(error);
      });
    }
  }

  handleChange(e) {
    const name = e.target.name;
    const value = e.target.value;
    this.setState({
      [name]: value
    });
    e.preventDefault();
  }

  render() {
    const destination = this.state.form;
    let form;

    if (destination === 'Checkout') {
      form = /*#__PURE__*/React.createElement(Checkout, {
        handleSubmit: this.handleSubmit,
        handleChange: this.handleChange
      });
    } else if (destination === 'Form1') {
      form = /*#__PURE__*/React.createElement(Form1, {
        handleSubmit: this.handleSubmit,
        handleChange: this.handleChange
      });
    } else if (destination === 'Form2') {
      form = /*#__PURE__*/React.createElement(Form2, {
        handleSubmit: this.handleSubmit,
        handleChange: this.handleChange
      });
    } else if (destination === 'Form3') {
      form = /*#__PURE__*/React.createElement(Form3, {
        handleSubmit: this.handleSubmit,
        handleChange: this.handleChange
      });
    } else if (destination === 'Confirmation') {
      form = /*#__PURE__*/React.createElement(Confirmation, {
        handleSubmit: this.handleSubmit,
        data: this.state
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "container"
    }, /*#__PURE__*/React.createElement("div", null, "Multistep Checkout"), form);
  }

}

class Checkout extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nextForm: ''
    };
  }

  componentDidMount() {
    this.setState({
      nextForm: 'Form1'
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "checkout",
      type: "button",
      onClick: e => this.props.handleSubmit(this.state.nextForm, e)
    }, "Checkout"));
  }

}

class Form1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nextForm: ""
    };
  }

  componentDidMount() {
    this.setState({
      nextForm: 'Form2'
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "name:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "name",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "email:"), /*#__PURE__*/React.createElement("input", {
      type: "email",
      name: "email",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "password:"), /*#__PURE__*/React.createElement("input", {
      type: "password",
      name: "password",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "form1",
      type: "button",
      onClick: e => this.props.handleSubmit(this.state.nextForm, e)
    }, "Next")));
  }

}

class Form2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nextForm: ""
    };
  }

  componentDidMount() {
    this.setState({
      nextForm: 'Form3'
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "line1:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "line1",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "line2:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "line2",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "city:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "city",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "state:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "state",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "zip code:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "shipzip",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "form2",
      type: "button",
      onClick: e => this.props.handleSubmit(this.state.nextForm, e)
    }, "Next")));
  }

}

class Form3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nextForm: ""
    };
  }

  componentDidMount() {
    this.setState({
      nextForm: 'Confirmation'
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "card #:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "cc",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "expiry date:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "exp",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "CVV:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "cvv",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "zip code:"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "billzip",
      onChange: this.props.handleChange,
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "form3",
      type: "button",
      onClick: e => this.props.handleSubmit(this.state.nextForm, e)
    }, "Next")));
  }

}

class Confirmation extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nextForm: ""
    };
  }

  componentDidMount() {
    this.setState({
      nextForm: 'Checkout'
    });
    axios.get('/account').then(this.reloadGroceries).catch(error => {
      console.log(error);
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement(Table, null)), /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "confirmation",
      type: "button",
      onClick: e => this.props.handleSubmit(this.state.nextForm, e)
    }, "Purchase"))));
  }

}

const Table = () => {
  return /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null), /*#__PURE__*/React.createElement("td", null));
};

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
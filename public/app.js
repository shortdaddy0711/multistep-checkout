class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      form: ''
    };
    this.handleFormState = this.handleFormState.bind(this);
  }

  componentDidMount() {
    this.setState({
      form: 'Checkout'
    });
  }

  handleFormState(destination) {
    this.setState({
      form: destination
    });
  }

  render() {
    const destination = this.state.form;
    let form;

    if (destination === 'Checkout') {
      form = /*#__PURE__*/React.createElement(Checkout, {
        nextForm: this.handleFormState
      });
    }

    ;

    if (destination === 'Form1') {
      form = /*#__PURE__*/React.createElement(Form1, {
        nextForm: this.handleFormState
      });
    }

    ;

    if (destination === 'Form2') {
      form = /*#__PURE__*/React.createElement(Form2, {
        nextForm: this.handleFormState
      });
    }

    ;

    if (destination === 'Form3') {
      form = /*#__PURE__*/React.createElement(Form3, {
        nextForm: this.handleFormState
      });
    }

    ;

    if (destination === 'Confirmation') {
      form = /*#__PURE__*/React.createElement(Confirmation, {
        nextForm: this.handleFormState
      });
    }

    ;
    return /*#__PURE__*/React.createElement("div", {
      className: "container"
    }, /*#__PURE__*/React.createElement("div", null, "Multistep Checkout"), form);
  }

}

class Checkout extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nextForm: ''
    };
  }

  componentDidMount() {
    this.setState({
      nextForm: 'Form1'
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "checkout",
      type: "button",
      onClick: e => this.props.nextForm(this.state.nextForm)
    }, "Checkout"));
  }

}

class Form1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      form: null,
      account: {
        name: '',
        email: '',
        password: ''
      }
    };
  }

  componentDidMount() {
    this.setState({
      form: 'Form2'
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "name: "), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "name",
      id: "name",
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "email: "), /*#__PURE__*/React.createElement("input", {
      type: "email",
      name: "email",
      id: "email",
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "password: "), /*#__PURE__*/React.createElement("input", {
      type: "password",
      name: "password",
      id: "password",
      required: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "toForm2",
      type: "button",
      onClick: e => this.props.nextForm(this.state.form)
    }, "Next")));
  }

}

class Form2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      form: this.props.nextForm
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "next",
      type: "button",
      onClick: e => this.setState({
        form: /*#__PURE__*/React.createElement(Form3, {
          nextForm: this.state.form
        })
      })
    }, "Next");
  }

}

class Form3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      form: this.props.nextForm
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "next",
      type: "button",
      onClick: e => this.setState({
        form: /*#__PURE__*/React.createElement(Confirmation, {
          nextForm: this.state.form
        })
      })
    }, "Next");
  }

}

class Confirmation extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      form: this.props.nextForm
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("button", {
      className: "btn",
      id: "next",
      type: "button",
      onClick: e => this.setState({
        form: /*#__PURE__*/React.createElement(Checkout, {
          nextForm: this.state.form
        })
      })
    }, "Purchase");
  }

}

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,